from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters
import pandas as pd
import numpy as np
import joblib
import datetime
import matplotlib.pyplot as plt
import io

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7820446476:AAEt5D1b6jo2_MArFEsOsGE71x18Aqoqygg'

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("model/lgbm_model.pkl")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –¥–∞—Ç—ã
def generate_features(date):
    date = pd.to_datetime(date, dayfirst=True)
    features = {
        'year': date.year,
        'month': date.month,
        'day': date.day,
        'week': date.isocalendar().week,
        'lag_1': 45000,
        'lag_2': 45000
    }
    return pd.DataFrame([features])

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º
def is_monday(date):
    return pd.to_datetime(date, dayfirst=True).weekday() == 0

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
def forecast_6_weeks(start_date):
    dates = []
    prices = []
    for i in range(6):
        next_date = pd.to_datetime(start_date, dayfirst=True) + pd.DateOffset(weeks=i)
        features = generate_features(next_date.strftime("%d.%m.%Y"))
        price = model.predict(features)[0]
        dates.append(next_date)
        prices.append(price)
    return dates, prices

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
def generate_forecast_plot(dates, prices):
    plt.figure(figsize=(10, 5))
    plt.plot(dates, prices, marker='o', linestyle='-', color='blue', label='–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã')
    for i, price in enumerate(prices):
        plt.text(dates[i], price, f'{price:.2f}', ha='center', va='bottom')
    plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ 6 –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä—ë–¥')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    plt.xticks(dates, [date.strftime('%d.%m.%Y') for date in dates], rotation=45, ha='right')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.annotate("–ö–æ–¥ –≤–µ—Ä—Å–∏–∏: 1.0", xy=(0.95, 0.02), xycoords='axes fraction', ha='right', va='bottom', fontsize=8, color='gray')
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–Ω–µ–¥–µ–ª—è"
def get_week_word(weeks):
    if weeks % 10 == 1 and weeks % 100 != 11:
        return '–Ω–µ–¥–µ–ª—é'
    elif 2 <= weeks % 10 <= 4 and not (12 <= weeks % 100 <= 14):
        return '–Ω–µ–¥–µ–ª–∏'
    else:
        return '–Ω–µ–¥–µ–ª—å'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–∫—É–ø–∫–∏ —Å —É—á—ë—Ç–æ–º –æ–±—â–µ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
def determine_strategy(prices):
    weeks_to_buy = 1
    trend = '–ø–∞–¥–∞–µ—Ç'

    for i in range(1, len(prices)):
        if prices[i] < prices[i - 1]:
            break
        weeks_to_buy = i + 1
        trend = '—Ä–∞—Å—Ç—ë—Ç'

    if prices[1] < prices[0]:
        trend = '–ø–∞–¥–∞–µ—Ç'

    return weeks_to_buy, trend

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É. üèóÔ∏è\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑."
    )
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
async def predict(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    try:
        if not is_monday(user_input):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º!")
            return

        dates, prices = forecast_6_weeks(user_input)
        weeks_to_buy, trend = determine_strategy(prices)
        strategy = f"üì¶ –ó–∞–∫—É–ø–∞–µ–º –Ω–∞ {weeks_to_buy} {get_week_word(weeks_to_buy)}."
        response = (
            f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ {user_input}: {prices[0]:.2f} —Ä—É–±.\n"
            f"üìà {strategy}\n"
            f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ü–µ–Ω–∞ {trend}."
        )
        graph = generate_forecast_plot(dates, prices)
        await update.message.reply_photo(photo=graph, caption=response)
    except Exception as e:
        response = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, predict))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
